// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abigen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TrixelsTokenMetaData contains all meta data concerning the TrixelsToken contract.
var TrixelsTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MinterLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TrixelBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TrixelCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"skyNetID\",\"type\":\"bytes23\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trixelId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620034d9380380620034d9833981810160405281019062000037919062000327565b6040518060400160405280600781526020017f54726978656c73000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f54524958000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb9291906200020d565b508060019080519060200190620000d49291906200020d565b505050620000f7620000eb6200013f60201b60201c565b6200014760201b60201c565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003be565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200021b9062000388565b90600052602060002090601f0160209004810192826200023f57600085556200028b565b82601f106200025a57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028a5782518255916020019190600101906200026d565b5b5090506200029a91906200029e565b5090565b5b80821115620002b95760008160009055506001016200029f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ef82620002c2565b9050919050565b6200030181620002e2565b81146200030d57600080fd5b50565b6000815190506200032181620002f6565b92915050565b60006020828403121562000340576200033f620002bd565b5b6000620003508482850162000310565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003a157607f821691505b60208210811415620003b857620003b762000359565b5b50919050565b61310b80620003ce6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806376daebe1116100b8578063b88d4fde1161007c578063b88d4fde1461034f578063c87b56dd1461036b578063cc54cce31461039b578063e985e9c5146103b9578063f2fde38b146103e9578063fca3b5aa1461040557610142565b806376daebe1146102bd5780638da5cb5b146102c757806395d89b41146102e5578063a22cb46514610303578063b487a8411461031f57610142565b806323b872dd1161010a57806323b872dd146101ff57806342842e0e1461021b57806342966c68146102375780636352211e1461025357806370a0823114610283578063715018a6146102b357610142565b806301ffc9a71461014757806306fdde03146101775780630754617214610195578063081812fc146101b3578063095ea7b3146101e3575b600080fd5b610161600480360381019061015c9190611eb7565b610421565b60405161016e9190611eff565b60405180910390f35b61017f610503565b60405161018c9190611fb3565b60405180910390f35b61019d610595565b6040516101aa9190612016565b60405180910390f35b6101cd60048036038101906101c89190612067565b6105bb565b6040516101da9190612016565b60405180910390f35b6101fd60048036038101906101f891906120c0565b610640565b005b61021960048036038101906102149190612100565b610758565b005b61023560048036038101906102309190612100565b6107b8565b005b610251600480360381019061024c9190612067565b6107d8565b005b61026d60048036038101906102689190612067565b6108a1565b60405161027a9190612016565b60405180910390f35b61029d60048036038101906102989190612153565b610953565b6040516102aa919061218f565b60405180910390f35b6102bb610a0b565b005b6102c5610a93565b005b6102cf610ba8565b6040516102dc9190612016565b60405180910390f35b6102ed610bd2565b6040516102fa9190611fb3565b60405180910390f35b61031d600480360381019061031891906121d6565b610c64565b005b6103396004803603810190610334919061226e565b610c7a565b604051610346919061218f565b60405180910390f35b610369600480360381019061036491906123d0565b610d88565b005b61038560048036038101906103809190612067565b610dea565b6040516103929190611fb3565b60405180910390f35b6103a3610ece565b6040516103b09190611eff565b60405180910390f35b6103d360048036038101906103ce9190612453565b610ee1565b6040516103e09190611eff565b60405180910390f35b61040360048036038101906103fe9190612153565b610f75565b005b61041f600480360381019061041a9190612153565b61106d565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ec57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104fc57506104fb826111b4565b5b9050919050565b606060008054610512906124c2565b80601f016020809104026020016040519081016040528092919081815260200182805461053e906124c2565b801561058b5780601f106105605761010080835404028352916020019161058b565b820191906000526020600020905b81548152906001019060200180831161056e57829003601f168201915b5050505050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105c68261121e565b610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc90612566565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061064b826108a1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b3906125f8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106db61128a565b73ffffffffffffffffffffffffffffffffffffffff16148061070a57506107098161070461128a565b610ee1565b5b610749576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107409061268a565b60405180910390fd5b6107538383611292565b505050565b61076961076361128a565b8261134b565b6107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079f9061271c565b60405180910390fd5b6107b3838383611429565b505050565b6107d383838360405180602001604052806000815250610d88565b505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90612788565b60405180910390fd5b61087181611690565b807f3bd96548c90407cb32f360d6006f95be87f4286b3704ca1fb188ab00bd96953a60405160405180910390a250565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561094a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109419061281a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bb906128ac565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a1361128a565b73ffffffffffffffffffffffffffffffffffffffff16610a31610ba8565b73ffffffffffffffffffffffffffffffffffffffff1614610a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7e90612918565b60405180910390fd5b610a9160006117ad565b565b610a9b61128a565b73ffffffffffffffffffffffffffffffffffffffff16610ab9610ba8565b73ffffffffffffffffffffffffffffffffffffffff1614610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0690612918565b60405180910390fd5b600a60009054906101000a900460ff1615610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5690612984565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f192417b3f16b1ce69e0c59b0376549666650245ffc05e4b2569089dda8589b6660405160405180910390a1565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610be1906124c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0d906124c2565b8015610c5a5780601f10610c2f57610100808354040283529160200191610c5a565b820191906000526020600020905b815481529060010190602001808311610c3d57829003601f168201915b5050505050905090565b610c76610c6f61128a565b8383611873565b5050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0390612788565b60405180910390fd5b610d4f600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660096000815480929190610d45906129d3565b91905055846119e0565b6009547f7a377a99ece8ba989aa95b3be55c8585f4701e461bcb22c58a2ac10be01c6fa960405160405180910390a26009549050919050565b610d99610d9361128a565b8361134b565b610dd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcf9061271c565b60405180910390fd5b610de484848484611bfd565b50505050565b6060610df58261121e565b610e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2b90612a8e565b60405180910390fd5b60006003600084815260200190815260200160002060009054906101000a900460481b90506000610e63611c59565b90506000815111610e835760405180602001604052806000815250610ec5565b8082604051602001610e959190612acf565b604051602081830303815290604052604051602001610eb5929190612b26565b6040516020818303038152906040525b92505050919050565b600a60009054906101000a900460ff1681565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610f7d61128a565b73ffffffffffffffffffffffffffffffffffffffff16610f9b610ba8565b73ffffffffffffffffffffffffffffffffffffffff1614610ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe890612918565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890612bbc565b60405180910390fd5b61106a816117ad565b50565b61107561128a565b73ffffffffffffffffffffffffffffffffffffffff16611093610ba8565b73ffffffffffffffffffffffffffffffffffffffff16146110e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e090612918565b60405180910390fd5b600a60009054906101000a900460ff1615611139576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113090612984565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a816040516111a99190612016565b60405180910390a150565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611305836108a1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006113568261121e565b611395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138c90612c4e565b60405180910390fd5b60006113a0836108a1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113e257506113e18185610ee1565b5b8061142057508373ffffffffffffffffffffffffffffffffffffffff16611408846105bb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611449826108a1565b73ffffffffffffffffffffffffffffffffffffffff161461149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612ce0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150690612d72565b60405180910390fd5b61151a838383611c96565b611525600082611292565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115759190612d92565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115cc9190612dc6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461168b838383611c9b565b505050565b600061169b826108a1565b90506116a981600084611c96565b6116b4600083611292565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117049190612d92565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117a981600084611c9b565b5050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d990612e68565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119d39190611eff565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4790612ed4565b60405180910390fd5b611a598261121e565b15611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612f40565b60405180910390fd5b611aa560008484611c96565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611af59190612dc6565b92505081905550826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003600084815260200190815260200160002060006101000a81548176ffffffffffffffffffffffffffffffffffffffffffffff021916908360481c0217905550818373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611bf860008484611c9b565b505050565b611c08848484611429565b611c1484848484611ca0565b611c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4a90612fd2565b60405180910390fd5b50505050565b60606040518060400160405280601381526020017f68747470733a2f2f736961736b792e6e65742f00000000000000000000000000815250905090565b505050565b505050565b6000611cc18473ffffffffffffffffffffffffffffffffffffffff16611e28565b15611e1b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611cea61128a565b8786866040518563ffffffff1660e01b8152600401611d0c9493929190613047565b6020604051808303816000875af1925050508015611d4857506040513d601f19601f82011682018060405250810190611d4591906130a8565b60015b611dcb573d8060008114611d78576040519150601f19603f3d011682016040523d82523d6000602084013e611d7d565b606091505b50600081511415611dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dba90612fd2565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e20565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e9481611e5f565b8114611e9f57600080fd5b50565b600081359050611eb181611e8b565b92915050565b600060208284031215611ecd57611ecc611e55565b5b6000611edb84828501611ea2565b91505092915050565b60008115159050919050565b611ef981611ee4565b82525050565b6000602082019050611f146000830184611ef0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f54578082015181840152602081019050611f39565b83811115611f63576000848401525b50505050565b6000601f19601f8301169050919050565b6000611f8582611f1a565b611f8f8185611f25565b9350611f9f818560208601611f36565b611fa881611f69565b840191505092915050565b60006020820190508181036000830152611fcd8184611f7a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061200082611fd5565b9050919050565b61201081611ff5565b82525050565b600060208201905061202b6000830184612007565b92915050565b6000819050919050565b61204481612031565b811461204f57600080fd5b50565b6000813590506120618161203b565b92915050565b60006020828403121561207d5761207c611e55565b5b600061208b84828501612052565b91505092915050565b61209d81611ff5565b81146120a857600080fd5b50565b6000813590506120ba81612094565b92915050565b600080604083850312156120d7576120d6611e55565b5b60006120e5858286016120ab565b92505060206120f685828601612052565b9150509250929050565b60008060006060848603121561211957612118611e55565b5b6000612127868287016120ab565b9350506020612138868287016120ab565b925050604061214986828701612052565b9150509250925092565b60006020828403121561216957612168611e55565b5b6000612177848285016120ab565b91505092915050565b61218981612031565b82525050565b60006020820190506121a46000830184612180565b92915050565b6121b381611ee4565b81146121be57600080fd5b50565b6000813590506121d0816121aa565b92915050565b600080604083850312156121ed576121ec611e55565b5b60006121fb858286016120ab565b925050602061220c858286016121c1565b9150509250929050565b60007fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000082169050919050565b61224b81612216565b811461225657600080fd5b50565b60008135905061226881612242565b92915050565b60006020828403121561228457612283611e55565b5b600061229284828501612259565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122dd82611f69565b810181811067ffffffffffffffff821117156122fc576122fb6122a5565b5b80604052505050565b600061230f611e4b565b905061231b82826122d4565b919050565b600067ffffffffffffffff82111561233b5761233a6122a5565b5b61234482611f69565b9050602081019050919050565b82818337600083830152505050565b600061237361236e84612320565b612305565b90508281526020810184848401111561238f5761238e6122a0565b5b61239a848285612351565b509392505050565b600082601f8301126123b7576123b661229b565b5b81356123c7848260208601612360565b91505092915050565b600080600080608085870312156123ea576123e9611e55565b5b60006123f8878288016120ab565b9450506020612409878288016120ab565b935050604061241a87828801612052565b925050606085013567ffffffffffffffff81111561243b5761243a611e5a565b5b612447878288016123a2565b91505092959194509250565b6000806040838503121561246a57612469611e55565b5b6000612478858286016120ab565b9250506020612489858286016120ab565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124da57607f821691505b602082108114156124ee576124ed612493565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612550602c83611f25565b915061255b826124f4565b604082019050919050565b6000602082019050818103600083015261257f81612543565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006125e2602183611f25565b91506125ed82612586565b604082019050919050565b60006020820190508181036000830152612611816125d5565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612674603883611f25565b915061267f82612618565b604082019050919050565b600060208201905081810360008301526126a381612667565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612706603183611f25565b9150612711826126aa565b604082019050919050565b60006020820190508181036000830152612735816126f9565b9050919050565b7f53656e646572206973206e6f7420746865206d696e7465720000000000000000600082015250565b6000612772601883611f25565b915061277d8261273c565b602082019050919050565b600060208201905081810360008301526127a181612765565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000612804602983611f25565b915061280f826127a8565b604082019050919050565b60006020820190508181036000830152612833816127f7565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612896602983611f25565b91506128a18261283a565b604082019050919050565b600060208201905081810360008301526128c581612889565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612902602083611f25565b915061290d826128cc565b602082019050919050565b60006020820190508181036000830152612931816128f5565b9050919050565b7f4d696e746572206973206c6f636b656400000000000000000000000000000000600082015250565b600061296e601083611f25565b915061297982612938565b602082019050919050565b6000602082019050818103600083015261299d81612961565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129de82612031565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a1157612a106129a4565b5b600182019050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612a78602f83611f25565b9150612a8382612a1c565b604082019050919050565b60006020820190508181036000830152612aa781612a6b565b9050919050565b6000819050919050565b612ac9612ac482612216565b612aae565b82525050565b6000612adb8284612ab8565b60178201915081905092915050565b600081905092915050565b6000612b0082611f1a565b612b0a8185612aea565b9350612b1a818560208601611f36565b80840191505092915050565b6000612b328285612af5565b9150612b3e8284612af5565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ba6602683611f25565b9150612bb182612b4a565b604082019050919050565b60006020820190508181036000830152612bd581612b99565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612c38602c83611f25565b9150612c4382612bdc565b604082019050919050565b60006020820190508181036000830152612c6781612c2b565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612cca602583611f25565b9150612cd582612c6e565b604082019050919050565b60006020820190508181036000830152612cf981612cbd565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612d5c602483611f25565b9150612d6782612d00565b604082019050919050565b60006020820190508181036000830152612d8b81612d4f565b9050919050565b6000612d9d82612031565b9150612da883612031565b925082821015612dbb57612dba6129a4565b5b828203905092915050565b6000612dd182612031565b9150612ddc83612031565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e1157612e106129a4565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612e52601983611f25565b9150612e5d82612e1c565b602082019050919050565b60006020820190508181036000830152612e8181612e45565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612ebe602083611f25565b9150612ec982612e88565b602082019050919050565b60006020820190508181036000830152612eed81612eb1565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612f2a601c83611f25565b9150612f3582612ef4565b602082019050919050565b60006020820190508181036000830152612f5981612f1d565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612fbc603283611f25565b9150612fc782612f60565b604082019050919050565b60006020820190508181036000830152612feb81612faf565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061301982612ff2565b6130238185612ffd565b9350613033818560208601611f36565b61303c81611f69565b840191505092915050565b600060808201905061305c6000830187612007565b6130696020830186612007565b6130766040830185612180565b8181036060830152613088818461300e565b905095945050505050565b6000815190506130a281611e8b565b92915050565b6000602082840312156130be576130bd611e55565b5b60006130cc84828501613093565b9150509291505056fea2646970667358221220d799803df2a7d8b88de04c215aa2cbd811308c55d9896a62cc47dc710a2fc20564736f6c634300080a0033",
}

// TrixelsTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TrixelsTokenMetaData.ABI instead.
var TrixelsTokenABI = TrixelsTokenMetaData.ABI

// TrixelsTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TrixelsTokenMetaData.Bin instead.
var TrixelsTokenBin = TrixelsTokenMetaData.Bin

// DeployTrixelsToken deploys a new Ethereum contract, binding an instance of TrixelsToken to it.
func DeployTrixelsToken(auth *bind.TransactOpts, backend bind.ContractBackend, _minter common.Address) (common.Address, *types.Transaction, *TrixelsToken, error) {
	parsed, err := TrixelsTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TrixelsTokenBin), backend, _minter)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TrixelsToken{TrixelsTokenCaller: TrixelsTokenCaller{contract: contract}, TrixelsTokenTransactor: TrixelsTokenTransactor{contract: contract}, TrixelsTokenFilterer: TrixelsTokenFilterer{contract: contract}}, nil
}

// TrixelsToken is an auto generated Go binding around an Ethereum contract.
type TrixelsToken struct {
	TrixelsTokenCaller     // Read-only binding to the contract
	TrixelsTokenTransactor // Write-only binding to the contract
	TrixelsTokenFilterer   // Log filterer for contract events
}

// TrixelsTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TrixelsTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrixelsTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TrixelsTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrixelsTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TrixelsTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrixelsTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TrixelsTokenSession struct {
	Contract     *TrixelsToken     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TrixelsTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TrixelsTokenCallerSession struct {
	Contract *TrixelsTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TrixelsTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TrixelsTokenTransactorSession struct {
	Contract     *TrixelsTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TrixelsTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TrixelsTokenRaw struct {
	Contract *TrixelsToken // Generic contract binding to access the raw methods on
}

// TrixelsTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TrixelsTokenCallerRaw struct {
	Contract *TrixelsTokenCaller // Generic read-only contract binding to access the raw methods on
}

// TrixelsTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TrixelsTokenTransactorRaw struct {
	Contract *TrixelsTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTrixelsToken creates a new instance of TrixelsToken, bound to a specific deployed contract.
func NewTrixelsToken(address common.Address, backend bind.ContractBackend) (*TrixelsToken, error) {
	contract, err := bindTrixelsToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TrixelsToken{TrixelsTokenCaller: TrixelsTokenCaller{contract: contract}, TrixelsTokenTransactor: TrixelsTokenTransactor{contract: contract}, TrixelsTokenFilterer: TrixelsTokenFilterer{contract: contract}}, nil
}

// NewTrixelsTokenCaller creates a new read-only instance of TrixelsToken, bound to a specific deployed contract.
func NewTrixelsTokenCaller(address common.Address, caller bind.ContractCaller) (*TrixelsTokenCaller, error) {
	contract, err := bindTrixelsToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenCaller{contract: contract}, nil
}

// NewTrixelsTokenTransactor creates a new write-only instance of TrixelsToken, bound to a specific deployed contract.
func NewTrixelsTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TrixelsTokenTransactor, error) {
	contract, err := bindTrixelsToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenTransactor{contract: contract}, nil
}

// NewTrixelsTokenFilterer creates a new log filterer instance of TrixelsToken, bound to a specific deployed contract.
func NewTrixelsTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TrixelsTokenFilterer, error) {
	contract, err := bindTrixelsToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenFilterer{contract: contract}, nil
}

// bindTrixelsToken binds a generic wrapper to an already deployed contract.
func bindTrixelsToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TrixelsTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TrixelsToken *TrixelsTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TrixelsToken.Contract.TrixelsTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TrixelsToken *TrixelsTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TrixelsToken.Contract.TrixelsTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TrixelsToken *TrixelsTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TrixelsToken.Contract.TrixelsTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TrixelsToken *TrixelsTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TrixelsToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TrixelsToken *TrixelsTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TrixelsToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TrixelsToken *TrixelsTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TrixelsToken.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TrixelsToken *TrixelsTokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TrixelsToken *TrixelsTokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TrixelsToken.Contract.BalanceOf(&_TrixelsToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TrixelsToken *TrixelsTokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TrixelsToken.Contract.BalanceOf(&_TrixelsToken.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TrixelsToken *TrixelsTokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TrixelsToken *TrixelsTokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TrixelsToken.Contract.GetApproved(&_TrixelsToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TrixelsToken *TrixelsTokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TrixelsToken.Contract.GetApproved(&_TrixelsToken.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TrixelsToken *TrixelsTokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TrixelsToken *TrixelsTokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TrixelsToken.Contract.IsApprovedForAll(&_TrixelsToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TrixelsToken *TrixelsTokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TrixelsToken.Contract.IsApprovedForAll(&_TrixelsToken.CallOpts, owner, operator)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_TrixelsToken *TrixelsTokenCaller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "minter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_TrixelsToken *TrixelsTokenSession) Minter() (common.Address, error) {
	return _TrixelsToken.Contract.Minter(&_TrixelsToken.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_TrixelsToken *TrixelsTokenCallerSession) Minter() (common.Address, error) {
	return _TrixelsToken.Contract.Minter(&_TrixelsToken.CallOpts)
}

// MinterLocked is a free data retrieval call binding the contract method 0xcc54cce3.
//
// Solidity: function minterLocked() view returns(bool)
func (_TrixelsToken *TrixelsTokenCaller) MinterLocked(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "minterLocked")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MinterLocked is a free data retrieval call binding the contract method 0xcc54cce3.
//
// Solidity: function minterLocked() view returns(bool)
func (_TrixelsToken *TrixelsTokenSession) MinterLocked() (bool, error) {
	return _TrixelsToken.Contract.MinterLocked(&_TrixelsToken.CallOpts)
}

// MinterLocked is a free data retrieval call binding the contract method 0xcc54cce3.
//
// Solidity: function minterLocked() view returns(bool)
func (_TrixelsToken *TrixelsTokenCallerSession) MinterLocked() (bool, error) {
	return _TrixelsToken.Contract.MinterLocked(&_TrixelsToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TrixelsToken *TrixelsTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TrixelsToken *TrixelsTokenSession) Name() (string, error) {
	return _TrixelsToken.Contract.Name(&_TrixelsToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TrixelsToken *TrixelsTokenCallerSession) Name() (string, error) {
	return _TrixelsToken.Contract.Name(&_TrixelsToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TrixelsToken *TrixelsTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TrixelsToken *TrixelsTokenSession) Owner() (common.Address, error) {
	return _TrixelsToken.Contract.Owner(&_TrixelsToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TrixelsToken *TrixelsTokenCallerSession) Owner() (common.Address, error) {
	return _TrixelsToken.Contract.Owner(&_TrixelsToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TrixelsToken *TrixelsTokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TrixelsToken *TrixelsTokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TrixelsToken.Contract.OwnerOf(&_TrixelsToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TrixelsToken *TrixelsTokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TrixelsToken.Contract.OwnerOf(&_TrixelsToken.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TrixelsToken *TrixelsTokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TrixelsToken *TrixelsTokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TrixelsToken.Contract.SupportsInterface(&_TrixelsToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TrixelsToken *TrixelsTokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TrixelsToken.Contract.SupportsInterface(&_TrixelsToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TrixelsToken *TrixelsTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TrixelsToken *TrixelsTokenSession) Symbol() (string, error) {
	return _TrixelsToken.Contract.Symbol(&_TrixelsToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TrixelsToken *TrixelsTokenCallerSession) Symbol() (string, error) {
	return _TrixelsToken.Contract.Symbol(&_TrixelsToken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TrixelsToken *TrixelsTokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TrixelsToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TrixelsToken *TrixelsTokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TrixelsToken.Contract.TokenURI(&_TrixelsToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TrixelsToken *TrixelsTokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TrixelsToken.Contract.TokenURI(&_TrixelsToken.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.Approve(&_TrixelsToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.Approve(&_TrixelsToken.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 trixelId) returns()
func (_TrixelsToken *TrixelsTokenTransactor) Burn(opts *bind.TransactOpts, trixelId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "burn", trixelId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 trixelId) returns()
func (_TrixelsToken *TrixelsTokenSession) Burn(trixelId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.Burn(&_TrixelsToken.TransactOpts, trixelId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 trixelId) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) Burn(trixelId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.Burn(&_TrixelsToken.TransactOpts, trixelId)
}

// LockMinter is a paid mutator transaction binding the contract method 0x76daebe1.
//
// Solidity: function lockMinter() returns()
func (_TrixelsToken *TrixelsTokenTransactor) LockMinter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "lockMinter")
}

// LockMinter is a paid mutator transaction binding the contract method 0x76daebe1.
//
// Solidity: function lockMinter() returns()
func (_TrixelsToken *TrixelsTokenSession) LockMinter() (*types.Transaction, error) {
	return _TrixelsToken.Contract.LockMinter(&_TrixelsToken.TransactOpts)
}

// LockMinter is a paid mutator transaction binding the contract method 0x76daebe1.
//
// Solidity: function lockMinter() returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) LockMinter() (*types.Transaction, error) {
	return _TrixelsToken.Contract.LockMinter(&_TrixelsToken.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xb487a841.
//
// Solidity: function mint(bytes23 skyNetID) returns(uint256)
func (_TrixelsToken *TrixelsTokenTransactor) Mint(opts *bind.TransactOpts, skyNetID [23]byte) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "mint", skyNetID)
}

// Mint is a paid mutator transaction binding the contract method 0xb487a841.
//
// Solidity: function mint(bytes23 skyNetID) returns(uint256)
func (_TrixelsToken *TrixelsTokenSession) Mint(skyNetID [23]byte) (*types.Transaction, error) {
	return _TrixelsToken.Contract.Mint(&_TrixelsToken.TransactOpts, skyNetID)
}

// Mint is a paid mutator transaction binding the contract method 0xb487a841.
//
// Solidity: function mint(bytes23 skyNetID) returns(uint256)
func (_TrixelsToken *TrixelsTokenTransactorSession) Mint(skyNetID [23]byte) (*types.Transaction, error) {
	return _TrixelsToken.Contract.Mint(&_TrixelsToken.TransactOpts, skyNetID)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TrixelsToken *TrixelsTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TrixelsToken *TrixelsTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _TrixelsToken.Contract.RenounceOwnership(&_TrixelsToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TrixelsToken.Contract.RenounceOwnership(&_TrixelsToken.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SafeTransferFrom(&_TrixelsToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SafeTransferFrom(&_TrixelsToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TrixelsToken *TrixelsTokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TrixelsToken *TrixelsTokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SafeTransferFrom0(&_TrixelsToken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SafeTransferFrom0(&_TrixelsToken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TrixelsToken *TrixelsTokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TrixelsToken *TrixelsTokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SetApprovalForAll(&_TrixelsToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SetApprovalForAll(&_TrixelsToken.TransactOpts, operator, approved)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address _minter) returns()
func (_TrixelsToken *TrixelsTokenTransactor) SetMinter(opts *bind.TransactOpts, _minter common.Address) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "setMinter", _minter)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address _minter) returns()
func (_TrixelsToken *TrixelsTokenSession) SetMinter(_minter common.Address) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SetMinter(&_TrixelsToken.TransactOpts, _minter)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address _minter) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) SetMinter(_minter common.Address) (*types.Transaction, error) {
	return _TrixelsToken.Contract.SetMinter(&_TrixelsToken.TransactOpts, _minter)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.TransferFrom(&_TrixelsToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TrixelsToken.Contract.TransferFrom(&_TrixelsToken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TrixelsToken *TrixelsTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TrixelsToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TrixelsToken *TrixelsTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TrixelsToken.Contract.TransferOwnership(&_TrixelsToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TrixelsToken *TrixelsTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TrixelsToken.Contract.TransferOwnership(&_TrixelsToken.TransactOpts, newOwner)
}

// TrixelsTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TrixelsToken contract.
type TrixelsTokenApprovalIterator struct {
	Event *TrixelsTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenApproval represents a Approval event raised by the TrixelsToken contract.
type TrixelsTokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TrixelsTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenApprovalIterator{contract: _TrixelsToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TrixelsTokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenApproval)
				if err := _TrixelsToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) ParseApproval(log types.Log) (*TrixelsTokenApproval, error) {
	event := new(TrixelsTokenApproval)
	if err := _TrixelsToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrixelsTokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TrixelsToken contract.
type TrixelsTokenApprovalForAllIterator struct {
	Event *TrixelsTokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenApprovalForAll represents a ApprovalForAll event raised by the TrixelsToken contract.
type TrixelsTokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TrixelsToken *TrixelsTokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TrixelsTokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenApprovalForAllIterator{contract: _TrixelsToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TrixelsToken *TrixelsTokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TrixelsTokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenApprovalForAll)
				if err := _TrixelsToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TrixelsToken *TrixelsTokenFilterer) ParseApprovalForAll(log types.Log) (*TrixelsTokenApprovalForAll, error) {
	event := new(TrixelsTokenApprovalForAll)
	if err := _TrixelsToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrixelsTokenMinterLockedIterator is returned from FilterMinterLocked and is used to iterate over the raw logs and unpacked data for MinterLocked events raised by the TrixelsToken contract.
type TrixelsTokenMinterLockedIterator struct {
	Event *TrixelsTokenMinterLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenMinterLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenMinterLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenMinterLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenMinterLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenMinterLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenMinterLocked represents a MinterLocked event raised by the TrixelsToken contract.
type TrixelsTokenMinterLocked struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMinterLocked is a free log retrieval operation binding the contract event 0x192417b3f16b1ce69e0c59b0376549666650245ffc05e4b2569089dda8589b66.
//
// Solidity: event MinterLocked()
func (_TrixelsToken *TrixelsTokenFilterer) FilterMinterLocked(opts *bind.FilterOpts) (*TrixelsTokenMinterLockedIterator, error) {

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "MinterLocked")
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenMinterLockedIterator{contract: _TrixelsToken.contract, event: "MinterLocked", logs: logs, sub: sub}, nil
}

// WatchMinterLocked is a free log subscription operation binding the contract event 0x192417b3f16b1ce69e0c59b0376549666650245ffc05e4b2569089dda8589b66.
//
// Solidity: event MinterLocked()
func (_TrixelsToken *TrixelsTokenFilterer) WatchMinterLocked(opts *bind.WatchOpts, sink chan<- *TrixelsTokenMinterLocked) (event.Subscription, error) {

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "MinterLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenMinterLocked)
				if err := _TrixelsToken.contract.UnpackLog(event, "MinterLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterLocked is a log parse operation binding the contract event 0x192417b3f16b1ce69e0c59b0376549666650245ffc05e4b2569089dda8589b66.
//
// Solidity: event MinterLocked()
func (_TrixelsToken *TrixelsTokenFilterer) ParseMinterLocked(log types.Log) (*TrixelsTokenMinterLocked, error) {
	event := new(TrixelsTokenMinterLocked)
	if err := _TrixelsToken.contract.UnpackLog(event, "MinterLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrixelsTokenMinterUpdatedIterator is returned from FilterMinterUpdated and is used to iterate over the raw logs and unpacked data for MinterUpdated events raised by the TrixelsToken contract.
type TrixelsTokenMinterUpdatedIterator struct {
	Event *TrixelsTokenMinterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenMinterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenMinterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenMinterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenMinterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenMinterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenMinterUpdated represents a MinterUpdated event raised by the TrixelsToken contract.
type TrixelsTokenMinterUpdated struct {
	Minter common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMinterUpdated is a free log retrieval operation binding the contract event 0xad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a.
//
// Solidity: event MinterUpdated(address minter)
func (_TrixelsToken *TrixelsTokenFilterer) FilterMinterUpdated(opts *bind.FilterOpts) (*TrixelsTokenMinterUpdatedIterator, error) {

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "MinterUpdated")
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenMinterUpdatedIterator{contract: _TrixelsToken.contract, event: "MinterUpdated", logs: logs, sub: sub}, nil
}

// WatchMinterUpdated is a free log subscription operation binding the contract event 0xad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a.
//
// Solidity: event MinterUpdated(address minter)
func (_TrixelsToken *TrixelsTokenFilterer) WatchMinterUpdated(opts *bind.WatchOpts, sink chan<- *TrixelsTokenMinterUpdated) (event.Subscription, error) {

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "MinterUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenMinterUpdated)
				if err := _TrixelsToken.contract.UnpackLog(event, "MinterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterUpdated is a log parse operation binding the contract event 0xad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a.
//
// Solidity: event MinterUpdated(address minter)
func (_TrixelsToken *TrixelsTokenFilterer) ParseMinterUpdated(log types.Log) (*TrixelsTokenMinterUpdated, error) {
	event := new(TrixelsTokenMinterUpdated)
	if err := _TrixelsToken.contract.UnpackLog(event, "MinterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrixelsTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TrixelsToken contract.
type TrixelsTokenOwnershipTransferredIterator struct {
	Event *TrixelsTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenOwnershipTransferred represents a OwnershipTransferred event raised by the TrixelsToken contract.
type TrixelsTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TrixelsToken *TrixelsTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TrixelsTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenOwnershipTransferredIterator{contract: _TrixelsToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TrixelsToken *TrixelsTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TrixelsTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenOwnershipTransferred)
				if err := _TrixelsToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TrixelsToken *TrixelsTokenFilterer) ParseOwnershipTransferred(log types.Log) (*TrixelsTokenOwnershipTransferred, error) {
	event := new(TrixelsTokenOwnershipTransferred)
	if err := _TrixelsToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrixelsTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TrixelsToken contract.
type TrixelsTokenTransferIterator struct {
	Event *TrixelsTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenTransfer represents a Transfer event raised by the TrixelsToken contract.
type TrixelsTokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TrixelsTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenTransferIterator{contract: _TrixelsToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TrixelsTokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenTransfer)
				if err := _TrixelsToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) ParseTransfer(log types.Log) (*TrixelsTokenTransfer, error) {
	event := new(TrixelsTokenTransfer)
	if err := _TrixelsToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrixelsTokenTrixelBurnedIterator is returned from FilterTrixelBurned and is used to iterate over the raw logs and unpacked data for TrixelBurned events raised by the TrixelsToken contract.
type TrixelsTokenTrixelBurnedIterator struct {
	Event *TrixelsTokenTrixelBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenTrixelBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenTrixelBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenTrixelBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenTrixelBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenTrixelBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenTrixelBurned represents a TrixelBurned event raised by the TrixelsToken contract.
type TrixelsTokenTrixelBurned struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTrixelBurned is a free log retrieval operation binding the contract event 0x3bd96548c90407cb32f360d6006f95be87f4286b3704ca1fb188ab00bd96953a.
//
// Solidity: event TrixelBurned(uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) FilterTrixelBurned(opts *bind.FilterOpts, tokenId []*big.Int) (*TrixelsTokenTrixelBurnedIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "TrixelBurned", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenTrixelBurnedIterator{contract: _TrixelsToken.contract, event: "TrixelBurned", logs: logs, sub: sub}, nil
}

// WatchTrixelBurned is a free log subscription operation binding the contract event 0x3bd96548c90407cb32f360d6006f95be87f4286b3704ca1fb188ab00bd96953a.
//
// Solidity: event TrixelBurned(uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) WatchTrixelBurned(opts *bind.WatchOpts, sink chan<- *TrixelsTokenTrixelBurned, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "TrixelBurned", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenTrixelBurned)
				if err := _TrixelsToken.contract.UnpackLog(event, "TrixelBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrixelBurned is a log parse operation binding the contract event 0x3bd96548c90407cb32f360d6006f95be87f4286b3704ca1fb188ab00bd96953a.
//
// Solidity: event TrixelBurned(uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) ParseTrixelBurned(log types.Log) (*TrixelsTokenTrixelBurned, error) {
	event := new(TrixelsTokenTrixelBurned)
	if err := _TrixelsToken.contract.UnpackLog(event, "TrixelBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrixelsTokenTrixelCreatedIterator is returned from FilterTrixelCreated and is used to iterate over the raw logs and unpacked data for TrixelCreated events raised by the TrixelsToken contract.
type TrixelsTokenTrixelCreatedIterator struct {
	Event *TrixelsTokenTrixelCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrixelsTokenTrixelCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrixelsTokenTrixelCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrixelsTokenTrixelCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrixelsTokenTrixelCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrixelsTokenTrixelCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrixelsTokenTrixelCreated represents a TrixelCreated event raised by the TrixelsToken contract.
type TrixelsTokenTrixelCreated struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTrixelCreated is a free log retrieval operation binding the contract event 0x7a377a99ece8ba989aa95b3be55c8585f4701e461bcb22c58a2ac10be01c6fa9.
//
// Solidity: event TrixelCreated(uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) FilterTrixelCreated(opts *bind.FilterOpts, tokenId []*big.Int) (*TrixelsTokenTrixelCreatedIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.FilterLogs(opts, "TrixelCreated", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrixelsTokenTrixelCreatedIterator{contract: _TrixelsToken.contract, event: "TrixelCreated", logs: logs, sub: sub}, nil
}

// WatchTrixelCreated is a free log subscription operation binding the contract event 0x7a377a99ece8ba989aa95b3be55c8585f4701e461bcb22c58a2ac10be01c6fa9.
//
// Solidity: event TrixelCreated(uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) WatchTrixelCreated(opts *bind.WatchOpts, sink chan<- *TrixelsTokenTrixelCreated, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TrixelsToken.contract.WatchLogs(opts, "TrixelCreated", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrixelsTokenTrixelCreated)
				if err := _TrixelsToken.contract.UnpackLog(event, "TrixelCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrixelCreated is a log parse operation binding the contract event 0x7a377a99ece8ba989aa95b3be55c8585f4701e461bcb22c58a2ac10be01c6fa9.
//
// Solidity: event TrixelCreated(uint256 indexed tokenId)
func (_TrixelsToken *TrixelsTokenFilterer) ParseTrixelCreated(log types.Log) (*TrixelsTokenTrixelCreated, error) {
	event := new(TrixelsTokenTrixelCreated)
	if err := _TrixelsToken.contract.UnpackLog(event, "TrixelCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
